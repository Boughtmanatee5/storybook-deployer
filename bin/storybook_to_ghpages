#!/usr/bin/env node

const shell = require('shelljs');
const publishUtils = require('../src/utils');
const path = require('path');
const fs = require('fs');
const glob = require('glob');
const packageJson = require(path.resolve('./package.json'));
const argv = require('yargs').argv;
const parseRepo = require('parse-repo');
const buildMonorepoIndex = require('../src/build-monorepo-index')

const SKIP_BUILD = Boolean(argv['existing-output-dir'])
const OUTPUT_DIR = argv.out || argv['existing-output-dir'] || 'out' + Math.ceil(Math.random() * 9999);

const defaultConfig = {
  gitUsername: 'GH Pages Bot',
  gitEmail: 'hello@ghbot.com',
  commitMessage: 'Deploy Storybook to GitHub Pages'
};

const config = Object.assign({}, defaultConfig, packageJson['storybook-deployer'] || defaultConfig);

const GIT_REMOTE = argv['remote'] || 'origin';
const TARGET_BRANCH = argv['branch'] || "gh-pages";
const SOURCE_BRANCH = argv['source-branch'] || 'master';
const NPM_SCRIPT = argv['script'] || 'build-storybook';
const CI_DEPLOY = Boolean(argv['ci']);
const HOST_TOKEN_ENV_VARIABLE = argv['host-token-env-variable'] || 'GH_TOKEN';
const HOST_TOKEN = process.env[HOST_TOKEN_ENV_VARIABLE];

// get GIT url
console.log('=> Getting the git remote URL');
let GIT_URL = publishUtils.exec(`git config --get remote.${GIT_REMOTE}.url`);
if (!GIT_URL) {
  console.log('This project is not configured with a remote git repo');
  process.exit(-1);
}

function buildStorybook(currentPackage) {
  // clear and re-create the out directory
  shell.rm('-rf', OUTPUT_DIR);
  shell.mkdir(OUTPUT_DIR);

  if (currentPackage.scripts[NPM_SCRIPT]) {
    publishUtils.exec('npm run ' + NPM_SCRIPT + ' -- -o ' + OUTPUT_DIR);
  } else {
    publishUtils.exec('node ./node_modules/.bin/build-storybook -o ' + OUTPUT_DIR);
  }
}

function buildSubPackage(origDir, dir) {
  shell.cd(dir);

  if (!fs.existsSync('package.json')) {
    return;
  }

  const subPackage = JSON.parse(
    fs.readFileSync(path.resolve('package.json'), 'utf8')
  );

  if (
    !fs.existsSync('.storybook') &&
    (!subPackage.scripts || !subPackage.scripts[NPM_SCRIPT])
  ) {
    return;
  }

  console.log(`=> Building storybook for: ${subPackage.name}`);
  buildStorybook(subPackage);

  const builtStorybook = path.join(dir, OUTPUT_DIR, '*');
  const outputPath = path.join(origDir, OUTPUT_DIR, subPackage.name);

  shell.mkdir('-p', outputPath);
  shell.cp('-r', builtStorybook, outputPath);
  shell.rm('-rf', builtStorybook);

  return subPackage;
}

if (!SKIP_BUILD) {
  if (argv.packages) {
    const origDir = process.cwd();
    
    const packages = glob
      .sync(path.join(origDir, argv.packages, '**/package.json'), {
        ignore: '**/node_modules/**'
      })
      .map(json => path.dirname(json))
      .map(subPackage => buildSubPackage(origDir, subPackage))
      .filter(subPackage => subPackage);

    shell.cd(origDir);

    buildMonorepoIndex(packages, argv['monorepo-index-generator'], OUTPUT_DIR);
  } else {
    console.log('=> Building storybook');
    buildStorybook(packageJson);
  }
}

// go to the out directory and create a *new* Git repo
shell.cd(OUTPUT_DIR);
publishUtils.exec('git init');

// inside this git repo we'll pretend to be a new user
publishUtils.exec('git config user.name ' + JSON.stringify(config.gitUsername));
publishUtils.exec('git config user.email ' + JSON.stringify(config.gitEmail));

// disable GPG signing
publishUtils.exec('git config commit.gpgsign false');

// The first and only commit to this new Git repo contains all the
// files present with the commit message "Deploy to GitHub Pages".
publishUtils.exec('git add .');
publishUtils.exec('git commit -m ' + JSON.stringify(config.commitMessage));

// Force push from the current repo's source branch (master by default) to the remote
// repo's gh-pages branch. (All previous history on the gh-pages branch
// will be lost, since we are overwriting it.) We redirect any output to
// /dev/null to hide any sensitive credential data that might otherwise be exposed.
console.log('=> Deploying storybook');
if (CI_DEPLOY) {
  const repositoryDetails = parseRepo(GIT_URL);

  if (repositoryDetails.host === 'github.com' && HOST_TOKEN) {
    GIT_URL = 'https://' + HOST_TOKEN + '@' + repositoryDetails.host + '/' + repositoryDetails.repository;
  }
}

publishUtils.exec('git push --force --quiet ' + GIT_URL + ' ' + SOURCE_BRANCH + ':' + TARGET_BRANCH)
shell.cd('..');
shell.rm('-rf', OUTPUT_DIR);

if (TARGET_BRANCH !== 'gh-pages') {
  const rawGitUrl = GIT_URL.replace('github.com', 'rawgit.com').replace('.git', '').replace(/\/$/ , '') + '/' +
    TARGET_BRANCH + '/index.html';
  console.log('=> Storybook deployed to: ' + rawGitUrl);
} else {
  console.log('=> Storybook deployed to: ' + publishUtils.getGHPagesUrl(GIT_URL));
}
